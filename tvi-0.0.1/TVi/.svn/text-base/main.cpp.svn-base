#include <QApplication>
#include <QFont>
#include <QGridLayout>
#include <QPushButton>
#include <QComboBox>
#include <QWidget>
#include <QPlainTextEdit>
#include <QTabWidget>

#include "main.h"
#include "featuresbox.h"
#include "entropy_viewer.h"
#include "histogram_viewer.h"
#include "anomaly_stuff.h"
#include "graphfeatureselector.h"
#include "graphvisualizer.h"



void MyWidget::tab_selection(int pos)
{

    if (pos == 0)
    {
        emit this->histogram_is_active(true);
        emit this->graphview_is_active(false);
    }
    else
    {
        emit this->histogram_is_active(false);
        emit this->graphview_is_active(true);
    }

}



MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent)
{
    QPushButton *quit = new QPushButton(tr("Quit"));
    quit->setFont(QFont("Times", 18, QFont::Bold));

    connect(quit, SIGNAL(clicked()), qApp, SLOT(quit()));

    FeaturesBox * features = new FeaturesBox();
    GraphFeatureSelector * graph_features = new GraphFeatureSelector();

    EntropyViewer * entropyviewer = new EntropyViewer();
    HistogramViewer * histview = new HistogramViewer();
    AnomalyStuff * anomalystuff = new AnomalyStuff();
    graphVisualizer * graphViewer = new graphVisualizer();
    graphViewer->setHidden(true);




    QTabWidget * hist_tab_selector = new QTabWidget();

    hist_tab_selector->addTab(features, "HIST");
    hist_tab_selector->addTab(graph_features, "GRAPH");


    QPlainTextEdit * log = new QPlainTextEdit("messages");
    log->setMaximumBlockCount (1);
    log->setReadOnly(true);
    log->setMaximumHeight(30);



    connect(hist_tab_selector, SIGNAL(currentChanged(int)), this, SLOT(tab_selection(int)));
    connect(this, SIGNAL(histogram_is_active(bool)), histview, SLOT(histogram_is_active(bool)));
    connect(this, SIGNAL(graphview_is_active(bool)), graphViewer, SLOT(graph_is_active(bool)));


    connect(features, SIGNAL(valueChanged_tcp_sport(int)), entropyviewer, SLOT(visualization_tcp_sport(int)));
    connect(features, SIGNAL(valueChanged_tcp_dport(int)), entropyviewer, SLOT(visualization_tcp_dport(int)));
    connect(features, SIGNAL(valueChanged_tcp_sip(int)), entropyviewer, SLOT(visualization_tcp_sip(int)));
    connect(features, SIGNAL(valueChanged_tcp_dip(int)), entropyviewer, SLOT(visualization_tcp_dip(int)));

    connect(features, SIGNAL(valueChanged_udp_sport(int)), entropyviewer, SLOT(visualization_udp_sport(int)));
    connect(features, SIGNAL(valueChanged_udp_dport(int)), entropyviewer, SLOT(visualization_udp_dport(int)));
    connect(features, SIGNAL(valueChanged_udp_sip(int)), entropyviewer, SLOT(visualization_udp_sip(int)));
    connect(features, SIGNAL(valueChanged_udp_dip(int)), entropyviewer, SLOT(visualization_udp_dip(int)));

    connect(features, SIGNAL(valueChanged_icmp_sip(int)), entropyviewer, SLOT(visualization_icmp_sip(int)));
    connect(features, SIGNAL(valueChanged_icmp_dip(int)), entropyviewer, SLOT(visualization_icmp_dip(int)));

    connect(features, SIGNAL(valueChanged_anomaly(int)), entropyviewer, SLOT(visualization_anomaly(int)));
    connect(features, SIGNAL(valueChanged_n_basis(int)), entropyviewer, SLOT(visualization_n_basis(int)));

    connect(entropyviewer, SIGNAL(time_click(int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)), histview, SLOT(time_clicked(int, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)));
    connect(features, SIGNAL(valueChanged_log_hist(int)), histview, SLOT(log_hist_clicked(int)));
    connect(entropyviewer, SIGNAL(anomaly_list_signal(AnomalyList*)), anomalystuff, SLOT(anomaly_list_signal(AnomalyList*)));
    connect(entropyviewer, SIGNAL(energy_eigen_signal(float)), anomalystuff, SLOT(eigenvalues_signal(float)));
    connect(histview, SIGNAL(send_log(QString)), log, SLOT(appendPlainText(QString)));
    connect(entropyviewer, SIGNAL(send_log(QString)), log, SLOT(appendPlainText(QString)));
    connect(entropyviewer, SIGNAL(send_log(QString)), log, SLOT(appendPlainText(QString)));
    connect(anomalystuff, SIGNAL(anomaly_selected(int,int)), entropyviewer, SLOT(anomaly_selected(int,int)));
    connect(histview, SIGNAL(selected_timestamps(std::vector<int>)), entropyviewer, SLOT(selected_histograms(std::vector<int>)));

    connect(graph_features, SIGNAL(draw_graph_signal(int,int,int)), graphViewer, SLOT(draw_graph_feature(int,int,int)));
    connect(entropyviewer, SIGNAL(time_click(int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)), graphViewer, SLOT(time_clicked(int,int)));

    QGridLayout *gridLayout = new QGridLayout;
    gridLayout->addWidget(quit, 0, 0);
    gridLayout->addWidget(hist_tab_selector, 1, 0);
    gridLayout->addWidget(entropyviewer,1, 1);
    gridLayout->addWidget(graphViewer,2, 1, 3, 1);
    gridLayout->addWidget(histview,2, 1, 3, 1);
    gridLayout->addWidget(anomalystuff,2, 0, 5, 1);
    gridLayout->setColumnStretch(0, 1);
    gridLayout->setColumnStretch(1, 10);
    gridLayout->setRowStretch(2,10);
    gridLayout->addWidget(log, 5,1);
    setLayout(gridLayout);


}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    MyWidget widget;
    widget.setWindowTitle("NetVIZ: a software for network feature visualization");
    widget.setGeometry(10, 50, 2520, 1450);
    widget.show();
    return app.exec();
}
